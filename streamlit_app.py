import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import io

st.title('Analyse de bank marketing')
df_file = st.sidebar.file_uploader("Upload a Dataset", type=['csv', 'txt'])
df = pd.read_csv(df_file)
option = st.sidebar.selectbox('Quel menu voulez-vous voir ?', ('Etude statistiques üìà', 'Menu X', 'Menu XX'))

if option == 'Etude statistiques üìà':
    option = st.sidebar.selectbox('Quel menu voulez-vous voir ?', ('Analyse des informations brutes', 'Etude des variables', 'Menu 3'))

    if option == 'Analyse des informations brutes':
        st.header("Informations du DataFrame :")
        buffer = io.StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)
        st.write("premier aper√ßu de la table, nous avons 11 162 enregistrements non null sur 17 variables, dont 7 variables sont de type integer et 10 de type objets.")
        st.write("des structures des donn√©es affichent que toutes les lignes sont remplies, tandis que les premi√®res lignes de donn√©es renvoient des valeurs 'Unknown', l'impact de cette valeur √† est un point d'attention √† voir plus loin..")
        st.header("Affichage des valeurs uniques prisent par les variables")
        categorical_columns = ["job", "marital", "education", "default", "housing", "loan", "contact", "month", "poutcome"]
        for column in categorical_columns:
            unique_values = df[column].unique()
            st.markdown(f"Valeurs uniques de la colonne '{column}': {unique_values}\n")
        st.header("Description statistique du DataFrame :")
        st.dataframe(df.describe())
        st.dataframe(df.describe(include=["object"]))
        st.write(" * Information client :")
        st.write("l'aper√ßu des donn√©es num√©riques montrent l'√©chantillon de la population varie de 18 √† 95 ans avec un moyen d'√¢ge de 41 ans et une grande majorit√© vers les 49 ans.")
        st.write("leur compte courant qui varie entre un d√©ficit de -6 847 et un cr√©dit de 81 204 (euro?), en moyen les clients a  1 528 (euro?) sur leurs comptes.")
        st.write(" * Information campagne √©tudi√©e :")
        st.write("Les clients sont contact√©s durant la campagne en moyen 2 et 3 fois. La mayorit√© des r√©ponses est obtenue au de la trois√®me prise de contact.")
        st.write("Un point d'attention est mis sur la valeur 63 affect√©e √† la prise de contact durant la campagne... peut-on d√©j√† en d√©duire que c'est une valeur ab√©rrante ?..pourtant pas impossible ..")
        st.write("Nous constatons aussi que le dernier contact avec le client se localise vers la fin du mois, le 22 avec une dur√©e entre 2 secondes et 1h.")
        st.write("La majorit√© des r√©ponses est obtenue entre 6 et 8 mins, pouvons-nous dire que les clients qui n√©cessitent de rester 1h en ligne sont plus difficile √† convaincre ?")
        st.write(" * Information campagne pr√©cedente :")
        st.write("On constate que 50% de l'√©chantillon n'ont jamais √©t√© contact√© (previous=0) avant la campagne, ce qui est en coh√©rence avec le nombre de jour s√©parant avec le dernier contact (pdays = -1).")
        st.write("Peut-on dire que l'√©chantillon conntient essentiellement de nouveaux contacts clients ?")
        st.write("et 75% de ceux qui ont √©t√© contact√©, ont √©t√© contact√© au bout de 21 jours et n'a eu en g√©n√©rale qu'un seul contact.")
        st.write("Pour ceux qui ont √©t√© r√©guli√®rement coontact√© (previous=58), ils ne le sont que au bout de plus de deux ans...Ce qui attire notre attention sur la coh√©rence entre le nombre de fois que le client a √©t√© contact√© (58) et \nla dur√©e du dernier contact plus de ans... Peut-on d√©duire que c'est un client en portefeuille depuis trop longtemps??")
        st.write("ou au contraire le client n'a √©t√© tr√®s solicit√© puisque il l'a √©t√© que au bout de plus de deux ans ...mais dans ce cas le nombre de contact, 58 fois avant la campagne nous pose quelques questions...58 fois")
        st.header("Description des variables")
        st.write("age (quantitative)")
        st.write("job: type de job (categorielle: \"admin.\",\"unknown\",\"unemployed\",\"management\",\"housemaid\",\"entrepreneur\",\"student\",\"blue-collar\",\"self-employed\",\"retired\",\"technician\",\"services\")")
        st.write("marital : Statut marital (categorielle: \"married\",\"divorced\",\"single\"; note: \"divorced\" meansdivorced or widowed)")
        st.write("education : (categorielle: \"unknown\",\"secondary\",\"primary\",\"tertiary\")")
        st.write("default : Le client a-t-il des cr√©dits en d√©faut ? (binaire: \"yes\",\"no\")")
        st.write("balance : Solde annuel et moyen des clients, en euros (quantitative)")
        st.write("housing :Le client a-t-il un cr√©dit immobilier ? (binaire: \"yes\",\"no\")")
        st.write("loan : Le client a-t-il des cr√©dits personnels ? (binaire: \"yes\",\"no\")")
        st.write("contact : Type de moyen de communication utilis√© pour contacter (categorielle: \"unknown\",\"telephone\",\"cellular\")")
        st.write("day : Dernier jour de contact du mois (quantitative)")
        st.write("month : Dernier mois de contact de l'ann√©e (categorielle: \"jan\", \"feb\", \"mar\", ..., \"nov\", \"dec\")")
        st.write("duration : Temps d'appel du dernier contact effectu√©, en secondes (quantitative)")
        st.write("campaign : Nombre de contacts effectu√©s durant cette campagne et pour ce client (quantitative, includes last contact)")
        st.write("pdays : Nombre de jours qui se sont √©coul√©s depuis qu'un client a √©t√© lors de la campagne pr√©c√©dente (quantitative, -1 signifie que le client n'a jamais √©t√© contact√©)")
        st.write("previous : Nombre de contacts effectu√©s lors de la campagne pr√©c√©dente et pour ce client (quantitative)")
        st.write("poutcome : R√©sultat de la campagne marketing pr√©c√©dente (categorielle: \"unknown\",\"other\",\"failure\",\"success\")")

    elif option == 'Etude des variables':
        st.header('_Visualisation de la distribution de la variable cible : deposit_')        

        fig1 = px.histogram(df, x="deposit")
        deposit_counts = df['deposit'].value_counts()
        labels = deposit_counts.index
        sizes = deposit_counts.values
        fig2 = go.Figure(data=go.Pie(labels=labels, values=sizes, textinfo='percent+label', insidetextorientation='radial'))
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig1, use_container_width=True)
        col2.plotly_chart(fig2, use_container_width=True)
        st.write('47.4% des clients de la banque ont souscrit un compte √† terme')
        st.write("52.6% des clients de la banque n'ont pas souscrit un compte √† terme")


        st.header("Analyse de toutes les variables sp√©cifiques aux clients")
        fig1 = px.histogram(df, x="age", nbins=20, title="Visualisation de la distribution de l'√¢ge",
                   labels={'age': '√Çge'}, marginal='box')

        df['duration_minutes'] = df['duration'] / 60
        fig2 = px.histogram(df, x="duration_minutes", nbins=20, title="Visualisation de la dur√©e de contact (appel tel)",
                   labels={'duration_minutes': 'Dur√©e (minutes)'}, marginal='box')
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig1, use_container_width=True)
        col2.plotly_chart(fig2, use_container_width=True)
        
        fig4 = go.Figure(data=go.Histogram(x=df['pdays'], nbinsx=20))
        fig4.update_layout(title="Distribution de pdays", xaxis_title="pdays")

        fig = go.Figure(data=go.Bar(x=df['job'].value_counts().index, y=df['job'].value_counts().values))
        fig.update_layout(title="'Distribution des jobs", xaxis_title="Emploi", yaxis_title="Nombre de clients")
        fig.update_xaxes(tickangle=45)
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig4, use_container_width=True)
        col2.plotly_chart(fig, use_container_width=True)

        marital_counts = df['marital'].value_counts()
        labels = marital_counts.index
        sizes = marital_counts.values
        fig1 = go.Figure(data=go.Pie(labels=labels, values=sizes, hoverinfo='label+percent',
                            textinfo='percent', insidetextorientation='radial'))
        fig1.update_layout(title='Distribution des √©tats matrimoniaux')

        
        fig2 = go.Figure(data=go.Bar(x=df['education'].value_counts().index, y=df['education'].value_counts().values))
        fig2.update_layout(title="Distribution du niveau d'√©tude", xaxis_title="Niveau d'√©ducation", yaxis_title="D√©compte")
        fig2.update_xaxes(tickangle=45)
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig1, use_container_width=True)
        col2.plotly_chart(fig2, use_container_width=True)
        st.write("Les clients ayant des emplois de gestion et des emplois d'ouvrier qualifi√© sont les plus nombreux dans la banque.")
        st.write("Il y a tr√®s peu d'√©tudiants parmi les clients de la banque.")
        st.write("Management et blue colar sont les m√©tiers les plus repr√©sent√©s chez les clients de la banque.")
        st.write("La majorit√© des clients de la banques sont mari√©s (56.9%) ou c√©libataire (31.5%).")
        st.write("La majorit√© des clients de la banques sont issues d'un cursus de second cycle (49.1%) et de troisi√©me cycle (33%)")
        st.write("Seulement 11% des clients sont issues d'un cursus de premier cycle")

        variables = ["default", "housing", "loan"]
        for variable in variables:
            counts = df[variable].value_counts()
            labels = counts.index
            sizes = counts.values
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
            plt.axis('equal')
            plt.title(f"R√©partition de la variable '{variable}'")
            st.pyplot(plt.gcf())
            plt.clf()

        contact_counts = df['contact'].value_counts()
        labels = contact_counts.index
        sizes = contact_counts.values
        plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        plt.axis('equal')
        plt.title('R√©partition des types de contact')
        st.pyplot(plt.gcf())
        plt.clf()

        month_counts = df['month'].value_counts().sort_index()
        months_ordered = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
        month_counts_ordered = month_counts.reindex(months_ordered)
        plt.bar(month_counts_ordered.index, month_counts_ordered.values)
        plt.title('D√©compte des contacts par mois')
        plt.xlabel('Mois')
        plt.ylabel('D√©compte')
        st.pyplot(plt.gcf())
        plt.clf()

        poutcome_counts = df['poutcome'].value_counts()
        labels = poutcome_counts.index
        counts = poutcome_counts.values
        plt.bar(labels, counts)
        plt.title('D√©compte des r√©sultats de la campagne pr√©c√©dente')
        plt.xlabel('R√©sultat de la campagne pr√©c√©dente')
        plt.ylabel('D√©compte')
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()

        poutcome_counts = df['poutcome'].value_counts()
        labels = poutcome_counts.index
        sizes = poutcome_counts.values
        plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        plt.axis('equal')
        plt.title('R√©partition des r√©sultats de la campagne pr√©c√©dente')
        st.pyplot(plt.gcf())
        plt.clf()

        job_balance_mean = df.groupby('job')['balance'].mean()
        job_balance_mean = job_balance_mean.sort_values(ascending=False)
        plt.bar(job_balance_mean.index, job_balance_mean.values)
        plt.title('Solde moyen par profession')
        plt.xlabel('Profession')
        plt.ylabel('Solde moyen')
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()
  
        sns.boxplot(x="job", y="age", data=df)
        plt.title("Distribution de l'√¢ge par type de job")
        plt.xlabel("Type de job")
        plt.ylabel("√Çge")
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()

        sns.boxplot(x="marital", y="age", data=df)
        plt.title("Distribution de l'√¢ge par √©tat matrimonial")
        plt.xlabel("√âtat matrimonial")
        plt.ylabel("√Çge")
        st.pyplot(plt.gcf())
        plt.clf()

        sns.boxplot(x="education", y="age", data=df)
        plt.title("Distribution de l'√¢ge par niveau d'√©ducation")
        plt.xlabel("Niveau d'√©ducation")
        plt.ylabel("√Çge")
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()

        fig, ax = plt.subplots(figsize=(6, 6))
        sns.boxplot(ax=ax, x="loan", y="age", data=df)
        ax.set_title("Distribution de l'√¢ge selon les pr√™ts personnels")
        ax.set_xlabel("Pr√™t personnel")
        ax.set_ylabel("√Çge")
        st.pyplot(fig)

        fig, ax = plt.subplots(figsize=(6, 6))
        sns.boxplot(ax=ax, x="housing", y="age", data=df)
        ax.set_title("Distribution de l'√¢ge selon les pr√™ts immobiliers")
        ax.set_xlabel("Pr√™t immobilier")
        ax.set_ylabel("√Çge")
        st.pyplot(fig)

    elif option == 'Menu 3':
        st.header("Effet de l'age sur Deposit")
        age_counts_yes = df[df['deposit'] == 'yes']['age'].value_counts().sort_index()
        age_counts_no = df[df['deposit'] == 'no']['age'].value_counts().sort_index()
        fig = go.Figure()

        fig.add_trace(go.Scatter(
        x=age_counts_yes.index, 
        y=age_counts_yes.values, 
        mode='lines',
        name='Deposit Yes',
        line=dict(color='#66B3FF')
    ))

    fig.add_trace(go.Scatter(
        x=age_counts_no.index, 
        y=age_counts_no.values, 
        mode='lines',
        name='Deposit No',
        line=dict(color='#FF9999')
    ))

    fig.update_layout(xaxis_title="√Çge",
        yaxis_title="Nombre de clients",
        hovermode="x",
        autosize=False,
        width=800,
        height=500,
    )

    st.plotly_chart(fig)
    st.write("""
Selon notre analyse, m√™me si une partie significative des clients d'√¢ge moyen souscrit √† des d√©p√¥ts √† terme, il est notable qu'une majorit√© d'entre eux n'y souscrit pas. 

L'analyse montre aussi que les clients les plus √¢g√©s sont plus enclins √† souscrire √† des d√©p√¥ts √† terme, avec moins d'entre eux qui choisissent de ne pas y souscrire. 

Par cons√©quent, il serait judicieux pour les banques de cibler davantage cette cat√©gorie d'√¢ge pour augmenter le nombre de souscriptions aux d√©p√¥ts √† terme.
""")

    
    st.header('Effet du mois sur deposit')
    deposit_yes = df[df['deposit'] == 'yes']
    deposit_no = df[df['deposit'] == 'no']
    count_yes = deposit_yes['month'].value_counts().sort_index()
    count_no = deposit_no['month'].value_counts().sort_index()
    bar_width = 0.35
    months = range(len(count_yes.index))
    fig, ax = plt.subplots(figsize=(10,6))
    bar1 = ax.bar(months, count_yes.values, bar_width, label='Deposit Yes', color='#66B3FF')
    bar2 = ax.bar([month + bar_width for month in months], count_no.values, bar_width, label='Deposit No', color='#FF9999')
    for i, value in enumerate(count_yes.values):
        ax.text(i, value, f"{value/df.shape[0]:.2%}", ha='center', va='bottom')
    for i, value in enumerate(count_no.values):
        ax.text(i + bar_width, value, f"{value/df.shape[0]:.2%}", ha='center', va='bottom')
    ax.set_xlabel('Mois')
    ax.set_ylabel('Nombre de clients')
    ax.set_xticks([month + bar_width / 2 for month in months])
    ax.set_xticklabels(count_yes.index)
    ax.legend()
    st.pyplot(fig)
    st.write("""
Les mois de mai, juin, juillet et ao√ªt de l'ann√©e pr√©c√©dente ont √©t√© les plus actifs en termes de contacts avec les clients de la banque. C'est √©galement pendant ces p√©riodes que le nombre de souscriptions aux d√©p√¥ts √† terme a √©t√© le plus √©lev√©.

Cependant, les mois de septembre, mars et d√©cembre, malgr√© une moindre activit√© en mati√®re de contacts, ont vu un taux de souscription aux d√©p√¥ts √† terme sup√©rieur. Il serait donc judicieux de concentrer davantage d'efforts pour contacter les clients pendant ces p√©riodes.
""")
    
    
    counts_df_yes = pd.DataFrame(campaign_counts_yes).reset_index()
    counts_df_yes.columns = ['Campaign', 'Count']
    counts_df_yes['Deposit'] = 'Yes'
    counts_df_no = pd.DataFrame(campaign_counts_no).reset_index()
    counts_df_no.columns = ['Campaign', 'Count']
    counts_df_no['Deposit'] = 'No'
    counts_df = pd.concat([counts_df_yes, counts_df_no])
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=counts_df['Campaign'][counts_df['Deposit'] == 'Yes'], y=counts_df['Count'][counts_df['Deposit'] == 'Yes'], mode='lines+markers', name='Deposit Yes', line=dict(color='#66B3FF')))
    fig.add_trace(go.Scatter(x=counts_df['Campaign'][counts_df['Deposit'] == 'No'], y=counts_df['Count'][counts_df['Deposit'] == 'No'], mode='lines+markers', name='Deposit No', line=dict(color='#FF9999')))
    fig.update_layout(title='Effet de campaign sur deposit', xaxis_title='Campagne', yaxis_title='Nombre de clients', legend_title='Deposit', autosize=False, width=1000, height=600, margin=dict(l=50, r=50, b=100, t=100, pad=4))
    st.plotly_chart(fig)








elif option == 'Menu X':
    print('soon')

elif option == 'Menu XX':
    print('soon')
