import pandas as pd
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import seaborn as sns
from sklearn.svm import SVC
import xgboost
from sklearn.model_selection import train_test_split #split
from sklearn.metrics import accuracy_score #metrics
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report

st.title('Analyse de bank marketing')
df = pd.read_csv('bank.csv')
option = st.sidebar.selectbox('Quel menu voulez-vous voir ?', ('Etude statistiques üìà', 'Menu X', 'Menu XX'))

if option == 'Etude statistiques üìà':
    option = st.sidebar.selectbox('Quel menu voulez-vous voir ?', ('Analyse des informations brutes', 'Etude des variables', 'Menu 3'))

    if option == 'Analyse des informations brute':
        st.header("Informations du DataFrame :")
        buffer = io.StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)
        st.write("premier aper√ßu de la table, nous avons 11 162 enregistrements non null sur 17 variables, dont 7 variables sont de type integer et 10 de type objets.")
        st.write("des structures des donn√©es affichent que toutes les lignes sont remplies, tandis que les premi√®res lignes de donn√©es renvoient des valeurs 'Unknown', l'impact de cette valeur √† est un point d'attention √† voir plus loin..")
        st.header("Affichage des valeurs uniques prisent par les variables")
        categorical_columns = ["job", "marital", "education", "default", "housing", "loan", "contact", "month", "poutcome"]
        for column in categorical_columns:
            unique_values = df[column].unique()
            st.markdown(f"Valeurs uniques de la colonne '{column}': {unique_values}\n")
        st.header("Description statistique du DataFrame :")
        st.dataframe(df.describe())
        st.dataframe(df.describe(include=["object"]))
        st.write(" * Informations client :")
        st.write("L'aper√ßu des donn√©es num√©riques montre que l'√©chantillon de la population varie de 18 √† 95 ans, avec un √¢ge moyen de 41 ans et une grande majorit√© vers 49 ans.")
        st.write("Le solde de leur compte courant varie entre un d√©ficit de -6 847 et un cr√©dit de 81 204 euros, en moyenne les clients ont 1 528 euros sur leurs comptes.")
        st.write(" * Informations campagne √©tudi√©e :")
        st.write("Les clients sont contact√©s durant la campagne en moyenne 2 √† 3 fois. La majorit√© des r√©ponses sont obtenues √† partir de la troisi√®me prise de contact.")
        st.write("Un point d'attention est mis sur la valeur 63 affect√©e √† la prise de contact durant la campagne... Peut-on d√©j√† en d√©duire que c'est une valeur aberrante ? Pourtant, pas impossible...")
        st.write("Nous constatons aussi que le dernier contact avec le client se localise vers la fin du mois, le 22, avec une dur√©e comprise entre 2 secondes et 1 heure.")
        st.write("La majorit√© des r√©ponses sont obtenues entre 6 et 8 minutes. Peut-on dire que les clients qui n√©cessitent de rester 1 heure en ligne sont plus difficiles √† convaincre ?")
        st.write(" * Informations campagne pr√©c√©dente :")
        st.write("On constate que 50% de l'√©chantillon n'a jamais √©t√© contact√© (previous=0) avant la campagne, ce qui est coh√©rent avec le nombre de jours s√©parant le dernier contact (pdays = -1).")
        st.write("Peut-on dire que l'√©chantillon contient essentiellement de nouveaux contacts clients ?")
        st.write("De plus, 75% de ceux qui ont √©t√© contact√©s l'ont √©t√© au bout de 21 jours et n'ont eu en g√©n√©ral qu'un seul contact.")
        st.write("Pour ceux qui ont √©t√© r√©guli√®rement contact√©s (previous=58), ils ne l'ont √©t√© qu'au bout de plus de deux ans... Ce qui attire notre attention sur la coh√©rence entre le nombre de fois que le client a √©t√© contact√© (58) et la dur√©e du dernier contact, plus de deux ans... Peut-on d√©duire que c'est un client en portefeuille depuis trop longtemps ?")
        st.write("Ou au contraire, le client n'a √©t√© tr√®s sollicit√© puisqu'il l'a √©t√© qu'au bout de plus de deux ans... Mais dans ce cas, le nombre de contacts, 58 fois avant la campagne, nous pose quelques questions... 58 fois")
        st.header("Description des variables")
        st.write("age (quantitative)")
        st.write("job: type de job (categorielle: \"admin.\",\"unknown\",\"unemployed\",\"management\",\"housemaid\",\"entrepreneur\",\"student\",\"blue-collar\",\"self-employed\",\"retired\",\"technician\",\"services\")")
        st.write("marital : Statut marital (categorielle: \"married\",\"divorced\",\"single\"; note: \"divorced\" meansdivorced or widowed)")
        st.write("education : (categorielle: \"unknown\",\"secondary\",\"primary\",\"tertiary\")")
        st.write("default : Le client a-t-il des cr√©dits en d√©faut ? (binaire: \"yes\",\"no\")")
        st.write("balance : Solde annuel et moyen des clients, en euros (quantitative)")
        st.write("housing :Le client a-t-il un cr√©dit immobilier ? (binaire: \"yes\",\"no\")")
        st.write("loan : Le client a-t-il des cr√©dits personnels ? (binaire: \"yes\",\"no\")")
        st.write("contact : Type de moyen de communication utilis√© pour contacter (categorielle: \"unknown\",\"telephone\",\"cellular\")")
        st.write("day : Dernier jour de contact du mois (quantitative)")
        st.write("month : Dernier mois de contact de l'ann√©e (categorielle: \"jan\", \"feb\", \"mar\", ..., \"nov\", \"dec\")")
        st.write("duration : Temps d'appel du dernier contact effectu√©, en secondes (quantitative)")
        st.write("campaign : Nombre de contacts effectu√©s durant cette campagne et pour ce client (quantitative, includes last contact)")
        st.write("pdays : Nombre de jours qui se sont √©coul√©s depuis qu'un client a √©t√© lors de la campagne pr√©c√©dente (quantitative, -1 signifie que le client n'a jamais √©t√© contact√©)")
        st.write("previous : Nombre de contacts effectu√©s lors de la campagne pr√©c√©dente et pour ce client (quantitative)")
        st.write("poutcome : R√©sultat de la campagne marketing pr√©c√©dente (categorielle: \"unknown\",\"other\",\"failure\",\"success\")")

    elif option == 'Etude des variables':
        st.header('_Visualisation de la distribution de la variable cible : deposit_')        

        fig1 = px.histogram(df, x="deposit")
        deposit_counts = df['deposit'].value_counts()
        labels = deposit_counts.index
        sizes = deposit_counts.values
        fig2 = go.Figure(data=go.Pie(labels=labels, values=sizes, textinfo='percent+label', insidetextorientation='radial'))
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig1, use_container_width=True)
        col2.plotly_chart(fig2, use_container_width=True)
        st.write('47.4% des clients de la banque ont souscrit un compte √† terme')
        st.write("52.6% des clients de la banque n'ont pas souscrit un compte √† terme")


        st.header("Analyse de toutes les variables sp√©cifiques aux clients")
        fig1 = px.histogram(df, x="age", nbins=20, title="Visualisation de la distribution de l'√¢ge",
                   labels={'age': '√Çge'}, marginal='box')

        df['duration_minutes'] = df['duration'] / 60
        fig2 = px.histogram(df, x="duration_minutes", nbins=20, title="Visualisation de la dur√©e de contact (appel tel)",
                   labels={'duration_minutes': 'Dur√©e (minutes)'}, marginal='box')
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig1, use_container_width=True)
        col2.plotly_chart(fig2, use_container_width=True)
        
        fig4 = go.Figure(data=go.Histogram(x=df['pdays'], nbinsx=20))
        fig4.update_layout(title="Distribution de pdays", xaxis_title="pdays")

        fig = go.Figure(data=go.Bar(x=df['job'].value_counts().index, y=df['job'].value_counts().values))
        fig.update_layout(title="'Distribution des jobs", xaxis_title="Emploi", yaxis_title="Nombre de clients")
        fig.update_xaxes(tickangle=45)
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig4, use_container_width=True)
        col2.plotly_chart(fig, use_container_width=True)

        marital_counts = df['marital'].value_counts()
        labels = marital_counts.index
        sizes = marital_counts.values
        fig1 = go.Figure(data=go.Pie(labels=labels, values=sizes, hoverinfo='label+percent',
                            textinfo='percent', insidetextorientation='radial'))
        fig1.update_layout(title='Distribution des √©tats matrimoniaux')

        
        fig2 = go.Figure(data=go.Bar(x=df['education'].value_counts().index, y=df['education'].value_counts().values))
        fig2.update_layout(title="Distribution du niveau d'√©tude", xaxis_title="Niveau d'√©ducation", yaxis_title="D√©compte")
        fig2.update_xaxes(tickangle=45)
        col1, col2 = st.columns(2)
        col1.plotly_chart(fig1, use_container_width=True)
        col2.plotly_chart(fig2, use_container_width=True)
        st.write("Les clients ayant des emplois de gestion et des emplois d'ouvrier qualifi√© sont les plus nombreux dans la banque.")
        st.write("Il y a tr√®s peu d'√©tudiants parmi les clients de la banque.")
        st.write("Les m√©tiers les plus repr√©sent√©s chez les clients de la banque sont le management et les blue-collar.")
        st.write("La majorit√© des clients de la banque sont mari√©s (56.9%) ou c√©libataires (31.5%).")
        st.write("La majorit√© des clients de la banque ont suivi un cursus de second cycle (49.1%) ou de troisi√®me cycle (33%).")
        st.write("Seulement 11% des clients ont suivi un cursus de premier cycle.")


        variables = ["default", "housing", "loan"]
        for variable in variables:
            counts = df[variable].value_counts()
            labels = counts.index
            sizes = counts.values
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
            plt.axis('equal')
            plt.title(f"R√©partition de la variable '{variable}'")
            st.pyplot(plt.gcf())
            plt.clf()

        contact_counts = df['contact'].value_counts()
        labels = contact_counts.index
        sizes = contact_counts.values
        plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        plt.axis('equal')
        plt.title('R√©partition des types de contact')
        st.pyplot(plt.gcf())
        plt.clf()

        month_counts = df['month'].value_counts().sort_index()
        months_ordered = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
        month_counts_ordered = month_counts.reindex(months_ordered)
        plt.bar(month_counts_ordered.index, month_counts_ordered.values)
        plt.title('D√©compte des contacts par mois')
        plt.xlabel('Mois')
        plt.ylabel('D√©compte')
        st.pyplot(plt.gcf())
        plt.clf()

        poutcome_counts = df['poutcome'].value_counts()
        labels = poutcome_counts.index
        counts = poutcome_counts.values
        plt.bar(labels, counts)
        plt.title('D√©compte des r√©sultats de la campagne pr√©c√©dente')
        plt.xlabel('R√©sultat de la campagne pr√©c√©dente')
        plt.ylabel('D√©compte')
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()

        poutcome_counts = df['poutcome'].value_counts()
        labels = poutcome_counts.index
        sizes = poutcome_counts.values
        plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        plt.axis('equal')
        plt.title('R√©partition des r√©sultats de la campagne pr√©c√©dente')
        st.pyplot(plt.gcf())
        plt.clf()

        job_balance_mean = df.groupby('job')['balance'].mean()
        job_balance_mean = job_balance_mean.sort_values(ascending=False)
        plt.bar(job_balance_mean.index, job_balance_mean.values)
        plt.title('Solde moyen par profession')
        plt.xlabel('Profession')
        plt.ylabel('Solde moyen')
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()
  
        sns.boxplot(x="job", y="age", data=df)
        plt.title("Distribution de l'√¢ge par type de job")
        plt.xlabel("Type de job")
        plt.ylabel("√Çge")
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()

        sns.boxplot(x="marital", y="age", data=df)
        plt.title("Distribution de l'√¢ge par √©tat matrimonial")
        plt.xlabel("√âtat matrimonial")
        plt.ylabel("√Çge")
        st.pyplot(plt.gcf())
        plt.clf()

        sns.boxplot(x="education", y="age", data=df)
        plt.title("Distribution de l'√¢ge par niveau d'√©ducation")
        plt.xlabel("Niveau d'√©ducation")
        plt.ylabel("√Çge")
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
        plt.clf()

        fig, ax = plt.subplots(figsize=(6, 6))
        sns.boxplot(ax=ax, x="loan", y="age", data=df)
        ax.set_title("Distribution de l'√¢ge selon les pr√™ts personnels")
        ax.set_xlabel("Pr√™t personnel")
        ax.set_ylabel("√Çge")
        st.pyplot(fig)

        fig, ax = plt.subplots(figsize=(6, 6))
        sns.boxplot(ax=ax, x="housing", y="age", data=df)
        ax.set_title("Distribution de l'√¢ge selon les pr√™ts immobiliers")
        ax.set_xlabel("Pr√™t immobilier")
        ax.set_ylabel("√Çge")
        st.pyplot(fig)

    elif option == 'Menu 3':
        st.header("Effet de l'age sur Deposit")
        age_counts_yes = df[df['deposit'] == 'yes']['age'].value_counts().sort_index()
        age_counts_no = df[df['deposit'] == 'no']['age'].value_counts().sort_index()
        fig = go.Figure()
        fig.add_trace(go.Scatter(
        x=age_counts_yes.index, 
        y=age_counts_yes.values, 
        mode='lines',
        name='Deposit Yes',
        line=dict(color='#66B3FF')
    ))
        fig.add_trace(go.Scatter(
    x=age_counts_no.index, 
    y=age_counts_no.values, 
    mode='lines',
    name='Deposit No',
    line=dict(color='#FF9999')
))
        fig.update_layout(xaxis_title="√Çge",
        yaxis_title="Nombre de clients",
        hovermode="x",
        autosize=False,
        width=800,
        height=500,
    )
        st.plotly_chart(fig)
        st.write("""
Selon notre analyse, m√™me si une partie significative des clients d'√¢ge moyen souscrit √† des d√©p√¥ts √† terme, il est notable qu'une majorit√© d'entre eux n'y souscrit pas. 

L'analyse montre aussi que les clients les plus √¢g√©s sont plus enclins √† souscrire √† des d√©p√¥ts √† terme, avec moins d'entre eux qui choisissent de ne pas y souscrire. 

Par cons√©quent, il serait judicieux pour les banques de cibler davantage cette cat√©gorie d'√¢ge pour augmenter le nombre de souscriptions aux d√©p√¥ts √† terme.
""")



    
        st.header('Effet du mois sur deposit')
        deposit_yes = df[df['deposit'] == 'yes']
        deposit_no = df[df['deposit'] == 'no']
        count_yes = deposit_yes['month'].value_counts().sort_index()
        count_no = deposit_no['month'].value_counts().sort_index()
        bar_width = 0.35
        months = range(len(count_yes.index))
        fig, ax = plt.subplots(figsize=(10,6))
        bar1 = ax.bar(months, count_yes.values, bar_width, label='Deposit Yes', color='#66B3FF')
        bar2 = ax.bar([month + bar_width for month in months], count_no.values, bar_width, label='Deposit No', color='#FF9999')
        for i, value in enumerate(count_yes.values):
            ax.text(i, value, f"{value/df.shape[0]:.2%}", ha='center', va='bottom')
        for i, value in enumerate(count_no.values):
            ax.text(i + bar_width, value, f"{value/df.shape[0]:.2%}", ha='center', va='bottom')
        ax.set_xlabel('Mois')
        ax.set_ylabel('Nombre de clients')
        ax.set_xticks([month + bar_width / 2 for month in months])
        ax.set_xticklabels(count_yes.index)
        ax.legend()
        st.pyplot(fig)
        st.write("""
Les mois de mai, juin, juillet et ao√ªt de l'ann√©e pr√©c√©dente ont √©t√© les plus actifs en termes de contacts avec les clients de la banque. C'est √©galement pendant ces p√©riodes que le nombre de souscriptions aux d√©p√¥ts √† terme a √©t√© le plus √©lev√©.

Cependant, les mois de septembre, mars et d√©cembre, malgr√© une moindre activit√© en mati√®re de contacts, ont vu un taux de souscription aux d√©p√¥ts √† terme sup√©rieur. Il serait donc judicieux de concentrer davantage d'efforts pour contacter les clients pendant ces p√©riodes.
""")


    
        st.header('Effet de campaign sur deposit')
        campaign_counts_yes = deposit_yes['campaign'].value_counts().sort_index()
        campaign_counts_no = deposit_no['campaign'].value_counts().sort_index()
        counts_df_yes = pd.DataFrame(campaign_counts_yes).reset_index()
        counts_df_yes.columns = ['Campaign', 'Count']
        counts_df_yes['Deposit'] = 'Yes'
        counts_df_no = pd.DataFrame(campaign_counts_no).reset_index()
        counts_df_no.columns = ['Campaign', 'Count']
        counts_df_no['Deposit'] = 'No'
        counts_df = pd.concat([counts_df_yes, counts_df_no])
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=counts_df['Campaign'][counts_df['Deposit'] == 'Yes'], y=counts_df['Count'][counts_df['Deposit'] == 'Yes'], mode='lines+markers', name='Deposit Yes', line=dict(color='#66B3FF')))
        fig.add_trace(go.Scatter(x=counts_df['Campaign'][counts_df['Deposit'] == 'No'], y=counts_df['Count'][counts_df['Deposit'] == 'No'], mode='lines+markers', name='Deposit No', line=dict(color='#FF9999')))
        fig.update_layout(xaxis_title='Campagne', yaxis_title='Nombre de clients', legend_title='Deposit', autosize=False, width=1000, height=600, margin=dict(l=50, r=50, b=100, t=100, pad=4))
        st.plotly_chart(fig)
        st.write("""
Selon notre analyse, plus nous multiplions les contacts avec les clients lors d'une campagne, plus il est probable qu'ils ne souscrivent pas aux d√©p√¥ts √† terme . 

Ainsi, pour augmenter les souscriptions aux d√©p√¥ts √† terme, il serait avantageux de limiter le nombre de contacts avec le client.
""")



    
        st.header('Effet de previous sur deposit')
        trace0 = go.Scatter(
         x=campaign_counts_yes.index,
         y=campaign_counts_yes.values,
         mode='lines',
         name='Deposit Yes',
         line=dict(color='#66B3FF')
)
        trace1 = go.Scatter(
        x=campaign_counts_no.index,
        y=campaign_counts_no.values,
        mode='lines',
        name='Deposit No',
        line=dict(color='#FF9999')
)
        data = [trace0, trace1]
        layout = go.Layout(xaxis=dict(title='Previous'),
        yaxis=dict(title='Nombre de clients'),
)
        fig = go.Figure(data=data, layout=layout)
        st.plotly_chart(fig)
        st.write("""
Selon nos observations, plus un client a √©t√© contact√© avant cette campagne, plus il est susceptible de ne pas souscrire aux d√©p√¥t √† terme. 
Pour optimiser les r√©sultats, il serait judicieux de limiter le nombre de contacts √† moins de 3.
""")

        st.header('Effet de Poutcome sur deposit')
        def plot_interactive(df):
            poutcome_unique = df['poutcome'].unique()
            deposit_yes = df[df['deposit'] == 'yes']
            deposit_no = df[df['deposit'] == 'no']

            deposit_yes_counts = deposit_yes['poutcome'].value_counts().reindex(poutcome_unique, fill_value=0)
            deposit_no_counts = deposit_no['poutcome'].value_counts().reindex(poutcome_unique, fill_value=0)

            fig = go.Figure(data=[
            go.Bar(name='Deposit Yes', x=poutcome_unique, y=deposit_yes_counts, marker_color='#66B3FF', text=[f"{(i / j) * 100:.1f}%" for i, j in zip(deposit_yes_counts, deposit_yes_counts + deposit_no_counts)], textposition='auto'),
            go.Bar(name='Deposit No', x=poutcome_unique, y=deposit_no_counts, marker_color='#FF9999', text=[f"{(i / j) * 100:.1f}%" for i, j in zip(deposit_no_counts, deposit_yes_counts + deposit_no_counts)], textposition='auto')
    ])
            fig.update_layout(barmode='group', xaxis_title='Poutcome', yaxis_title='Nombre de clients')
            return fig


        fig = plot_interactive(df)
        st.plotly_chart(fig)
        st.write("""
Selon les r√©sultats de la campagne pr√©c√©dente, lorsque l'issue est un √©chec, il y a 50 % de chances que le client ne souscrive pas au d√©p√¥t √† terme. Parmi tous les √©checs, 50,3 % des clients d√©cident de souscrire, tandis que 49,7 % choisissent de ne pas souscrire au d√©p√¥t √† terme.

En revanche, si l'issue est un succ√®s, il y a une forte probabilit√© que le client souscrive au d√©p√¥t √† terme. Parmi tous les succ√®s, 91,3 % des clients s'abonnent, tandis que 8,7 % ne s'abonnent pas au d√©p√¥t √† terme.
""")

        st.header('Tests statistiques')
        st.write('Tests statistiques variable cat√©gorielle : utilisation de chi¬≤')
        cat_features = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome', 'deposit']

        chi2_p_values = {}

        for feature in cat_features:
            if feature != 'deposit':
                contingency_table = pd.crosstab(df[feature], df['deposit'])
                _, p, _, _ = chi2_contingency(contingency_table)
                chi2_p_values[feature] = p
        st.write(chi2_p_values)

        st.write('Tests statistiques variable cat√©gorielle : utilisation du test t de student')
        num_features = ['age', 'balance', 'duration', 'campaign', 'pdays', 'previous']
        ttest_p_values = {}
        for feature in num_features:
            group1 = df[df['deposit'] == 'yes'][feature]
            group2 = df[df['deposit'] == 'no'][feature]
            _, p = ttest_ind(group1, group2)
            ttest_p_values[feature] = p
        st.write(ttest_p_values)
        st.write("""
Les valeurs de p des tests du Chi-carr√© pour les variables cat√©gorielles et des tests t pour les variables num√©riques sont toutes significativement inf√©rieures √† 0,05. Cela signifie que nous pouvons rejeter l'hypoth√®se nulle pour ces variables. Par cons√©quent, il existe une diff√©rence statistiquement significative entre les groupes de d√©p√¥t (yes et no) pour chaque variable num√©rique.

En r√©sum√©, les tests du Chi-carr√© pour les variables cat√©gorielles et les tests t pour les variables num√©riques sugg√®rent que toutes ces caract√©ristiques ont une relation statistiquement significative avec la variable de d√©p√¥t. Par cons√©quent, nous pouvons dire que toutes ces variables pourraient potentiellement avoir un effet sur la d√©cision d'un client de faire un d√©p√¥t ou non. Cependant, il est important de se rappeler que la corr√©lation n'implique pas la causalit√©, et ces r√©sultats ne nous indiquent pas comment ces variables influencent le r√©sultat du d√©p√¥t. Pour cela, une investigation plus approfondie et √©ventuellement une mod√©lisation pr√©dictive seraient n√©cessaires.
""")


        st.header('Conclusion')
        st.write("""
L'ann√©e pass√©e, la plupart des interactions avec les clients de la banque ont eu lieu entre les mois de mai et ao√ªt. Cependant, le mois de mai, qui a connu le plus grand nombre de contacts, a √©galement vu le moins d'adh√©sion aux d√©p√¥ts √† terme. Les mois de mars, septembre et d√©cembre ont vu peu de contacts, et il serait b√©n√©fique de privil√©gier ces p√©riodes pour une meilleure communication.

Lorsqu'un client est sollicit√© par plusieurs campagnes ou est contact√© plusieurs fois, il a tendance √† se d√©sint√©resser des d√©p√¥ts √† terme. Il est donc recommand√© de limiter les interactions √† deux ou trois tentatives au maximum.

Au niveau des professions, les retrait√©s, les √©tudiants et les aides m√©nag√®res semblent √™tre les plus enclins √† opter pour les d√©p√¥ts √† terme. Les retrait√©s, qui d√©pensent g√©n√©ralement peu, sont plus dispos√©s √† investir leur argent dans une institution financi√®re. Les √©tudiants forment √©galement un groupe privil√©gi√© pour la souscription aux d√©p√¥ts √† terme.

Malgr√© une souscription notable aux d√©p√¥ts √† terme chez les clients d'√¢ge moyen, ils sont plus nombreux √† ne pas souscrire. Par contre, les clients √¢g√©s adh√®rent davantage √† ces produits et sont moins nombreux √† refuser. Il serait donc profitable pour les banques de concentrer leurs efforts sur la client√®le √¢g√©e pour augmenter les souscriptions aux d√©p√¥ts √† terme.

En mati√®re de r√©sultats de campagnes ant√©rieures, un √©chec conduit √† une probabilit√© de 50% pour le client de ne pas souscrire au d√©p√¥t √† terme. Par contre, si le r√©sultat de la campagne pr√©c√©dente a √©t√© positif, les chances que le client souscrive sont √©lev√©es. Pr√©cis√©ment, 91,3 % des succ√®s ont abouti √† une souscription, contre 8,7 % qui n'ont pas abouti.

Les clients qui n'ont pas d'int√©r√™t pour les pr√™ts immobiliers pourraient √™tre int√©ress√©s par les d√©p√¥ts √† terme. 

De plus, un solde client sup√©rieur √† la moyenne est un indicateur positif de souscription √† un d√©p√¥t √† terme.
""")




elif option == 'Menu X':
    print('soon')
    if option == 'Test Prediction':
        df = pd.read_csv('bank.csv')
        #On √©carte les valeurs -1 de pdays pour ne pas les traiter lors du pre-processing
        pdays_filtered = df['pdays'][df['pdays'] != -1]
        # Pour 'campaign'
        Q1_campaign = df['campaign'].quantile(0.25)
        Q3_campaign = df['campaign'].quantile(0.75)
        IQR_campaign = Q3_campaign - Q1_campaign
        Sbas_campaign = Q1_campaign - 1.5 * IQR_campaign
        Shaut_campaign = Q3_campaign + 1.5 * IQR_campaign

        # Pour 'pdays' (excluding -1 values)
        Q1_pdays = pdays_filtered.quantile(0.25)
        Q3_pdays = pdays_filtered.quantile(0.75)
        IQR_pdays = Q3_pdays - Q1_pdays
        Sbas_pdays = Q1_pdays - 1.5 * IQR_pdays
        Shaut_pdays = Q3_pdays + 1.5 * IQR_pdays

        # Pour 'previous'
        Q1_previous = df['previous'].quantile(0.25)
        Q3_previous = df['previous'].quantile(0.75)
        IQR_previous = Q3_previous - Q1_previous
        Sbas_previous = Q1_previous - 1.5 * IQR_previous
        Shaut_bound_previous = Q3_previous + 1.5 * IQR_previous

        #Pour 'Duration'
        Q1_duration = df['duration'].quantile(0.25)
        Q3_duration = df['duration'].quantile(0.75)
        IQR_duration = Q3_duration - Q1_duration
        Sbas_duration = Q1_previous - 1.5 * IQR_duration
        Shaut_bound_duration = Q3_duration + 1.5 * IQR_duration

        moyenne_pdays = pdays_filtered.mean()
        moyenne_campaign = df['campaign'].mean()
        moyenne_previous = df['previous'].mean()
        moyenne_duration = df['duration'].mean()

        # Remplacer les valeurs aberrantes de 'pdays' par sa moyenne (en excluant les valeurs -1)
        df.loc[(df['pdays'] > Shaut_pdays) & (df['pdays'] != -1), 'pdays'] = moyenne_pdays

        # Remplacer les valeurs aberrantes de 'campaign' par sa moyenne
        df.loc[df['campaign'] > Shaut_campaign, 'campaign'] = moyenne_campaign

        # Remplacer les valeurs aberrantes de 'previous' par la moyenne de 'campaign'
        df.loc[df['previous'] > Shaut_bound_previous, 'previous'] = moyenne_previous

        # Remplacer les valeurs aberrantes de 'duration' par la moyenne de 'campaign'
        df.loc[df['duration'] > Shaut_bound_duration, 'duration'] = moyenne_duration


        #Transformation des colonnes age et balance pour creer un d√©coupage dans le but d'attenuer les valeurs extr√©mes qui ne me semble pas abberante tout en les gardant.
        #Cr√©ation du bins et des √©tiquettes
        age_bins = [18, 25, 35, 50, 65, 100]
        age_labels = ["18_25", "25_35", "35_50", "50_65", "65_100"]
        # On applique le changement sur le dataset pour creer la colonne
        df['age_group'] = pd.cut(df['age'], bins=age_bins, labels=age_labels, right=False)
        #Cr√©ation du bins et des √©tiquettes
        balance_bins = [-6848, 0, 122, 550, 1708, 81205]
        balance_labels = ["negatif", "tres_faible", "faible", "moyen", "eleve"]
        # Cut the balance column into bins
        df['balance_group'] = pd.cut(df['balance'], bins=balance_bins, labels=balance_labels, right=False)
        # On applique le changement sur le dataset pour creer la colonne
        df['age_group'] = pd.cut(df['age'], bins=age_bins, labels=age_labels, right=False)
        df['age_group'] = df['age_group'].astype('object')
        df['balance_group'] = df['balance_group'].astype('object')
        # S√©paration des donn√©es en ensembles d'entra√Ænement et de test
        # S√©paration des donn√©es en ensembles d'entra√Ænement et de test
        X = df.drop(columns=['deposit'])
        y = df['deposit']
        TEST_SIZE = 0.25
        RAND_STATE = 42
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=TEST_SIZE, random_state=RAND_STATE)

        # Encodage de la variable cible
        label_encoder = LabelEncoder()
        y_train = label_encoder.fit_transform(y_train)
        y_test = label_encoder.transform(y_test)

        # S√©lection des colonnes cat√©gorielles
        categorical_columns = X_train.select_dtypes(include=['object']).columns

        # Encodage des caract√©ristiques cat√©gorielles
        encoder = OneHotEncoder(drop='first', sparse=False)

        # Utilisation de  fit sur l'ensemble d'entra√Ænement
        encoder.fit(X_train[categorical_columns])

        # Transformations des ensembles d'entra√Ænement et de test
        encoded_train = encoder.transform(X_train[categorical_columns])
        encoded_test = encoder.transform(X_test[categorical_columns])

        # Conversion des caract√©ristiques encod√©es en dataframes
        encoded_train_df = pd.DataFrame(encoded_train, columns=encoder.get_feature_names_out(categorical_columns))
        encoded_test_df = pd.DataFrame(encoded_test, columns=encoder.get_feature_names_out(categorical_columns))

        # Fusion des dataframes encod√©s avec les originaux
        X_train_encoded = X_train.drop(columns=categorical_columns).reset_index(drop=True).merge(encoded_train_df, left_index=True, right_index=True)
        X_test_encoded = X_test.drop(columns=categorical_columns).reset_index(drop=True).merge(encoded_test_df, left_index=True, right_index=True)

        # Suppression des colonnes inutiles
        X_train = X_train_encoded.drop(columns=['balance', 'age'])
        X_test = X_test_encoded.drop(columns=['balance', 'age'])
        st.dataframe(X_train.info())


    elif option == 'Menu XX':
        print('soon')
